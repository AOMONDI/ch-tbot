#create model - 3 layers. first layer 128 neurons, 2nd layer 64 neurins and 3rd layer contains number of neurons 
#equal to number of intents to predict output intent with softmax

model = Sequential()
model.add(Dense(128, input_shape = (len(train_x[0]),), activation = "relu"))
model.add(Dropout(0.5))
model.add(Dense(64, activation = "relu"))
model.add(Dropout(0.5))
model.add(Dense(len(train_y[0]), activation = "softmax"))

#compile model.stochastic gradient with nesterov accelerated gradient gives good results for this model
sgd = SGD(lr = 0.01, decay = 1e-6, momentum = 0.9, nesterov = True)
model.compile(loss = "categorical_crossentropy", optimizer = sgd, metrics = ["accuracy"])

#fitting and saving the model
hist = model.fit(np.array(train_x), np.array(train_y), epochs = 200, batch_size = 5,verbose = 1)
model.save("ch@tbot_model.h5", hist)

print("Model created")